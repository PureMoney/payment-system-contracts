{
  // Required: Source code language, such as "Solidity", "serpent", "lll", "assembly", etc.
  "language": "Solidity",
  // Required
  "sources": {
    // The keys here are the "global" names of the source files,
    // imports can use other files via remappings (see below).
    "universaltoken.sol": {
		"urls": ["universaltoken.sol"]
	}
    // "../../payment-system-contracts/contracts/localtoken.sol": {},
    // "../../payment-system-contracts/contracts/PureMoney.sol": {},
    // "../../payment-system-contracts/contracts/payment.sol": {},
    // "../../payment-system-contracts/contracts/RSTIShares.sol": {}
  },
  // Optional
  "settings": {
    // Optional: Sorted list of remappings
    "remappings": [ "openzeppelin-solidity=../../payment-system-contracts/node_modules/openzeppelin-solidity" ],
    // Optional: Optimizer settings
    "optimizer": {
      // disabled by default
      "enabled": true,
      // Optimize for how many times you intend to run the code.
      // Lower values will optimize more for initial deployment cost, higher values will optimize more for high-frequency usage.
      "runs": 200
    },
    //// Addresses of the libraries. If not all libraries are given here, it can result in unlinked objects whose output data is different.
    //"libraries": {
    //  // The top level key is the the name of the source file where the library is used.
    //  // If remappings are used, this source file should match the global path after remappings were applied.
    //  // If this key is an empty string, that refers to a global level.
    //  "myFile.sol": {
    //    "MyLib": "0x123123..."
    //  }
    //},
    // The following can be used to select desired outputs.
    // If this field is omitted, then the compiler loads and does type checking, but will not generate any outputs apart from errors.
    // The first level key is the file name and the second is the contract name, where empty contract name refers to the file itself,
    // while the star refers to all of the contracts.
    //
    // The available output types are as follows:
    //   abi - ABI
    //   ast - AST of all source files
    //   legacyAST - legacy AST of all source files
    //   devdoc - Developer documentation (natspec)
    //   userdoc - User documentation (natspec)
    //   metadata - Metadata
    //   ir - New assembly format before desugaring
    //   evm.assembly - New assembly format after desugaring
    //   evm.legacyAssembly - Old-style assembly format in JSON
    //   evm.bytecode.object - Bytecode object
    //   evm.bytecode.opcodes - Opcodes list
    //   evm.bytecode.sourceMap - Source mapping (useful for debugging)
    //   evm.bytecode.linkReferences - Link references (if unlinked object)
    //   evm.deployedBytecode* - Deployed bytecode (has the same options as evm.bytecode)
    //   evm.methodIdentifiers - The list of function hashes
    //   evm.gasEstimates - Function gas estimates
    //   ewasm.wast - eWASM S-expressions format (not supported atm)
    //   ewasm.wasm - eWASM binary format (not supported atm)
    //
    // Note that using a using `evm`, `evm.bytecode`, `ewasm`, etc. will select every
    // target part of that output. Additionally, `*` can be used as a wildcard to request everything.
    //
    "outputSelection": {
      // Enable the abi and object bytecode output of all contracts defined in all files.
      "*": {
        "*": [ "abi", "evm.deployedBytecode.object" ]
      }
    }
  }
}